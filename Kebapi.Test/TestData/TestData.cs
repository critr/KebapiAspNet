using Xunit;

namespace Kebapi.Test
{
    /// <summary>
    /// Various sets of test data for our XUnit tests. (We also use Bogus 
    /// elsewhere.)
    /// </summary>
    public static class TestData
    {
        // Going with xUnit's TheoryData throughout, which is strongly-typed.

        /// <summary>
        /// Set of serialised objects we're not expecting anywhere. 
        /// </summary>
        public static readonly TheoryData<object> UnexpectedRequests = new()
        {
            "{ \"Name5\" : \"Suppose\", \"Surname\" : 7 }",
            "{ \"Name\" : \"Gretchen\", \"Potato\" : \"76\" }",
            "{}",
            "{ \"HouseForSale\" : { \"Field1\" : \"SomeValue1\", \"Field2\" : \"SomeValue2\" } }",
        };

        /// <summary>
        /// Set of invalid ID values.
        /// <para>
        /// Note: Inclusion of null or empty strings will misdirect routing e.g. 
        /// users/{id} where id is null will hit users/ instead of users/{id}
        /// </para>
        /// </summary>
        public static readonly TheoryData<object> InvalidIds = new()
        {
            { "abc" },
            { 0 },
            { -1 },
            { "&h" },
            { true },
            { false },
            { 6.725M },
            { 86.9 },
        };

        /// <summary>
        /// Set of IDs that are valid, but we know do not exist in our system. 
        /// </summary>
        // Accurate only as long as we're certain our data set does not contain
        // these values. Would require a check when starting up to make sure.
        public static readonly TheoryData<int> InexistentIds = new()
        {
            { int.MaxValue },
            { int.MaxValue -1 },
            { int.MaxValue -20 },
            { int.MaxValue -300 },
        };



        // Tests operating on "Known" values (e.g. WhenGettingAKnownUser) rely
        // on data generated by Dal.ResetKebApiTestDatabase.

        /// <summary>
        /// Set of Venues we know exist after calling Dal.ResetKebApiTestDatabase. 
        /// </summary>
        public static readonly TheoryData<Dto.ApiVenue> KnownVenues = new()
        {
            new() 
            { 
                Id = 1, 
                Name = "Splendid Kebabs", 
                GeoLat = 2.000000M, 
                GeoLng = 1.000000M, 
                Address = "42 Bla Avenue, Madrid", 
                Rating = 4, 
                MainMediaPath = "image\\1.jpg" 
            },
            new()
            { 
                Id = 5, 
                Name = "The Dirty One", 
                GeoLat = 4.000000M, 
                GeoLng = 1.000000M, 
                Address = "10 Banana Place, Madrid", 
                Rating = 5, 
                MainMediaPath = "image\\5.jpg" 
            },
            new()
            {
                Id = 8, 
                Name = "Star Kebab", 
                GeoLat = 3.000000M, 
                GeoLng = 6.000000M, 
                Address = "222 Crispy Crescent, Madrid", 
                Rating = 4, 
                MainMediaPath = "image\\8.jpg" 
            },
        };

        /// <summary>
        /// Set of Users we know exist after calling Dal.ResetKebApiTestDatabase. 
        /// </summary>
        public static readonly TheoryData<Dto.ApiUser> KnownUsers = new()
        {
            new() 
            {
                Id = 1, 
                Username = "aard", 
                Name = "Bob", 
                Surname = "Smithers", 
                Email = "aard@smithers.com" 
            },
            new() 
            {
                Id = 2,
                Username = "Babs",
                Name = "Lucy",
                Surname = "Matthews",
                Email = "babs@matthews.co.uk" 
            },
            new() 
            { 
                Id = 3,
                Username = "MeatyMan",
                Name = "Percy", 
                Surname = "Archibald-Hyde", 
                Email = "meatyman@archibald-hyde.eu" 
            },
            new()
            {
                Id = 4, 
                Username = "kAb0000B", 
                Name = "Farquhar", 
                Surname = "Rogers", 
                Email = "kAb0000B@rogers.me" 
            },
            new() 
            {
                Id = 5, 
                Username = "ItsGigi", 
                Name = "Gigi", 
                Surname = "McInactive-User", 
                Email = "gigi@gmail.com" 
            },
        };

    }
}
